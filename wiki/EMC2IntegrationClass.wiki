#summary An outline of the content of the Sector67 EMC2 Machine Integrator's class

=Implementing CNC motion control with EMC2=
If you have a working mill or are planning to build one and are interested in controlling it via computer.  This class will prepare attendees to convert or build the computer control system for a mill or other machine with the Linux-based open source EMC2 software suite.  The class will cover choosing and configuring the software, PC, I/O interface components, electronic interface hardware, motors and motor controllers needed to move a machine.  The actual mechanics of machine building (axes, lead screws, etc.) are not covered in this class.

<wiki:toc max_depth="1" />

= Introduction to machine control concepts =
== Big picture goals ==
== Brief gcode primer ==
To illustrate some of the challenges of motion control, we'll consider an extremely simple snippet of gcode to rapidly move the machine to the home position and then move one unit in the X direction at a feed speed of 100 units per minute:

{{{
G00 X0 Y0 Z0
G01 X1 Y0 Z0 F100
}}}

Assuming the machine is already at the home position, in an ideal world the machine would immediately start to travel at the feed rate, reach the end of the move and immediately stop.  In the real world of course, the table, motors and other moving machine components have mass and momentum and so the machine needs to accelerate to reach the desired velocity.

  * Mass, momentum, acceleration and velocity
  * Real-time motion planning
  * PID tuning concepts introduced
  * Understanding types of feedback and encoders
  * Stepper and servo systems compare and contrast

= Simplified block diagram of a motion control system =
  * Motors
  * Motor controllers
  * Encoder feedback
  * Controller interface hardware
  * Motion planning software

= Introduction to EMC2 =
  * Background and history
  * Basic architecture
  * Real-time considerations
  * Comparison with Mach3
  * Choosing and testing PC hardware for EMC2
  * Choosing interface hardware for EMC2
    * Parallel ports
    * Dedicated I/O boards
  * The EMC2 live CD
  * Updating the software via the EMC2 buildbot
  * Running EMC2 in simulation mode for development and testing

==Exercise 1: installing a virtual EMC2 instance==
The first exercise is to create a virtual EMC2 sandbox for yourself.  This sandbox will have multiple uses, including familiarizing yourself with EMC2 configuration, practice using various EMC2 GUIs, practice configuration editing and things like classic ladder development.

Please reference [InstallEMC2InAVirtualBox] for the detailed exercise.

=EMC2 configuration=
  * Keeping your software configuration under revision control
  * Using pncconf for generating your configuration
  * The HAL files
  * Hardware drivers
  * The ini file
  * User interface components
  * Axis UI

=Concerns when interfacing the hardware electronics=
  * Failure modes
  * Mains isolation
  * Electrical noise
  * Ground loops
  * Optical isolation
  * Physical robustness
  * Heat dissipation
  * Emergency stops
  * Machine limits

=Integrating the hardware electronics=
  * Review of the 1100 mill conversion integration

=Debugging EMC2=
  * HAL meter
  * HAL scope
  * HAL command lines

=Moving the machine under feedback control=
  * PID tuning applied

=Customizing the software futher=
  * Classicladder-based programs
  * PyVCP UI elements
  * Custom gcode integration
  * Machine communication to outside sources (IRC, X)?
  * Displaying custom messages in axis
  
=Customizing the hardware further=
  * Various 4th axis configuration scenarios
  * Probe input for touch off and automated sensing
  * Automated tool changers
  * Coordinated spindle moves (tapping, etc.)
  * Different spindle heads (plastic extrusion, frosting extrusion, tangential knife, etc.)