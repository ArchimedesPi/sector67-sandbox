#summary An outline of the content of the Sector67 EMC2 Machine Integrator's class

=Implementing CNC motion control with EMC2=
If you have a working mill or are planning to build one and are interested in controlling it via computer.  This class will prepare attendees to convert or build the computer control system for a mill or other machine with the Linux-based open source EMC2 software suite.  The class will cover choosing and configuring the software, PC, I/O interface components, electronic interface hardware, motors and motor controllers needed to move a machine.  The actual mechanics of machine building (axes, lead screws, etc.) are not covered in this class.

<wiki:toc max_depth="1" />

=Introduction to machine control concepts=
  * Big picture goals
  * Stepper and servo systems compare and contrast
  * Understanding types of feedback and encoders

=Motion control issues=
  * Acceleration and velocity
  * Real-time motion planning
  * PID tuning concepts

=Introduction to EMC2=
  * Background and history
  * Basic architecture
  * Real-time considerations
  * Comparison with Mach3
  * Choosing and testing PC hardware for EMC2
  * Choosing interface hardware for EMC2
    * Parallel ports
    * Dedicated I/O boards
  * The EMC2 live CD
  * Updating the software via the EMC2 buildbot
  * Running EMC2 in simulation mode for development and testing

=EMC2 configuration=
  * Keeping your software configuration under revision control
  * Using pncconf for generating your configuration
  * Hardware drivers
  * The ini file
  * The HAL files
  * User interface components
  * Axis UI

=Concerns when interfacing the hardware electronics=
  * Failure modes
  * Mains isolation
  * Electrical noise
  * Ground loops
  * Optical isolation
  * Physical robustness
  * Heat dissipation
  * Emergency stops
  * Machine limits

=Integrating the hardware electronics=
  * Review of the 1100 mill conversion integration

=Debugging EMC2=
  * HAL meter
  * HAL scope
  * HAL command lines

=Moving the machine under feedback control=
  * PID tuning applied

=Customizing the software futher=
  * Classicladder-based programs
  * PyVCP UI elements
  * Custom gcode integration
  * Machine communication to outside sources (IRC, X)?
  * Displaying custom messages in axis
  
=Customizing the hardware further=
  * Various 4th axis configuration scenarios
  * Probe input for touch off and automated sensing
  * Automated tool changers
  * Coordinated spindle moves (tapping, etc.)
  * Different spindle heads (plastic extrusion, frosting extrusion, tangential knife, etc.)