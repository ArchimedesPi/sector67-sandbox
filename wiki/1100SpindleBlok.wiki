#summary A page for documentation of the HH Roberts spindle and SpindleBlok controller

= Introduction =
This page contains documentation of the Anilam 1100M mill's HH Roberts spindle and !SpindleBlok controller.  This is the spindle head for the Sector67 1100M mill that was [ProjectSheetCake Converted to EMC2].  The HH Roberts spindle head was an aftermarket add-on to the Anilam mill to replace a failed head, and as such was basically not integrated into the mill controls except for the three-phase power contactors being enabled when the servos were enabled.

This generally worked fine as the mill does not have an automatic tool changer, and the manual controls ("local controls" in !SpindleBlok terminology) provided sufficient feedback to run mill operations.

== Drive faulting ==
However in mid-2011 the spindle started to have intermittent faults which put parts and tooling at risk because the mill would happily continue machining not knowing the spindle had stopped.  We started a somewhat lengthy diagnostic procedure that we hope will eventually lead us to a completely stable solution, with some of the steps being:

  * Review the wiring in the local control box.  Some of this is fairly shoddily done and could stand to be re-done but we don't believe this is currently the source of the faults.
  * Remove the VFD control panel cover to be able to view the flashing LED fault codes upon encountering a fault condition.  Viewing two faults in this way showed five flashes, which is a "DC Link Undervoltage" condition.
  * Enable the RS485 serial connection to the controller to be able to read system settings and older faults, and to be able to gather ongoing diagnostics and configure the drive as needed.  This is a small saga all by itself, and we had to work through several issues including:
    * Errant use of a null model cable instead of a straight through DB9 cable
    * Creation of a (subsequently unnecessary) custom headphone jack 12V power cable for the serial converter.
    * Mislabeled/confusingly labeled RS485 send/receive terminals 
    * Unknown default serial port settings for the drive
    * Unknown device RS485 ID for the controller
  We were eventually able to work through all of these issues to achieve serial communication to the !SpindleBlok controller.
  * Development of a Python-based RS485 serial terminal to simplify sending and receiving commands.  This software calculates the checksums of both send and received data and formats returned data into various forms.
  * Discovery and use of the Spindleware Windows-based software for reading and writing data to the controller.  This software provides great diagnostic information and interprets the information from the controller for easy consumption.

Using Spindleware, we are able to see that the last four fault conditions were:

TODO: capture this information here

The !SpindleBlok manual describes these fault conditions as:

||Fault No (hex)||Fault No (decimal)||Fault LED||Blink Count||Description Cause and Remedy||
||3000h||12288||3||Phase Overcurrent||The motor current sensors detected excessive current and shut the drive down. If this happened during commissioning or at start, the current regulators may be unstable. Try reducing the current regulator gains by half (parameters K07 kp_i_nom and K08 kd_i_nom). If this does not solve the problem, make sure that the motor parameters match the motor. Make sure the magnetizing current (G18 k_id) is not too large. It should not be above 60 except in special cases. Try reducing the per-unit-resistance (G17 k_rs) by half and recommissioning. If the overcurrent happened while the motor is loaded, try reducing the load limit (G10 load_lim). If the motor rated current matches the drive rated current then the load limit should not exceed 200%. If the overcurrent happened during field weakening then check the slip limit (G11 slip_lim). Most standard AC motors have a slip limit between 200% and 300%. Special spindle motors may have a limit as high as 450%. Also make sure that the appropriate rated slip is programmed by setting rated speed (G02 rated_speed). If this is a low slip motor then you may need to reduce the rate limits on flux (L04 flux_rate_lim_pos and L05 flux_rate_lim_neg). Finally experiment with the leakage inductance parameter G06 ll_lm by increasingor decreasing it by 10.||
||5000h||20480||5||DC link undervoltage||The voltage sensor has detected a low bus voltage. If the drive is a 240 volt or 480 volt class drive with three phase power within line voltage specification then the most likely explanation is that a momentary input line dropout occurred. If the problem persists, monitor the input line voltage. If the input power is single phase or the drive is a 115 volt class drive then drawing excessive power from the motor may droop the line or cause enough ripple on the DC bus to cause an undervoltage trip. Increasing the DC bus capacitance will reduce the DC bus ripple.||


The Spindleware software has a software oscilloscope facility that we can use to capture ongoing data.  Until we are able to resolve the fault condition completely, we are asking mill users to run the oscilloscope diagnostics during their milling operations.

Of course now that we have better diagnostic monitoring in place the controller has not faulted after many hours of operation.

== EMC2 integration ==
The current plan is to integrate the drive to EMC2 in a few steps.  The first step will be to tie the spindle fault condition into EMC2 such that when/if the controller faults, the mill will stop.

== Useful links ==
Some useful links for this spindle head are:

The HH Roberts manual for the complete head, including some basic wiring diagrams and diagnostic codes.  It is probably important to note that this spindle head no longer ships with a SpindleBlok, but a different VFD controller:
  * []TODO

The SpindleBlok manual describing the VFD controller in detail:
  * [http://www.compumotor.com/new_ulm/manuals_download.htm]
  * [http://www.compumotor.com/new_ulm/manual/Spindle.zip]
  * [http://www.compumotor.com/new_ulm/pdf/5004-0502%20layout%20asrd.pdf]

The SpindkeBlok Windows serial control software.  Very helpful for configuring the controller and reading diagnostics.
  * [http://www.compumotor.com/new_ulm/downloads_current.htm]
  * [http://www.compumotor.com/new_ulm/Downloads/SpindleWare_1p00p01_Release_10p29p2004.zip]

Our own Python-based serial terminal that calculates checksums, sends commands, etc.:
  * [http://code.google.com/p/sector67-sandbox/source/browse/#svn%2Ftrunk%2FRS485Terminal%2Fsrc]

RS485 serial converter manuals:
  * []TODO