#summary The fourth stepper axis implementation for our Anliam conversion

<wiki:toc max_depth="3" />

= Introduction =
As we started to implement 4th axis capability for our mills in earnest, we acquired a 8" horizontal/vertical rotary table with a stepper motor already integrated.  This led us to transition our effort away from the servo-based fourth axis described at FourthServoAxis to a stepper-based system.  It's a testament to the flexibility of EMC2 and our implementation that this really won't cause us to change much at all with respect to the implementation.  

It will give us a chance to work out some issues associated with integrating a stepper into a servo-based system.

== Stepper driver ==
The stepper drive we are using is labled DS335, and we were able to find datasheets and some integration information for it here:

[http://www.interinar.com/ds335.html]
[http://www.interinar.com/public_docs/DS335.pdf]

It will provide up to 3.5 amps and is designed to be optimally run at 36V.  It has optically isolated inputs designed to run with no resistors at 5V, and expects step and pulse inputs as well as +5V.

== Stepper motor ==
The motor supplied is a NEMA 34 frame size stepper that otherwise has absolutely no specifications on the motor itself.  The phases are non-tapped, TODO: get Ohm resistance, and the motor seems functional with a 3.5 amp controller at ~30 volts.

== Rotary table ==
TODO: picture of the assembled table

[http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/whole_assembly.JPG http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/thumbnails/whole_assembly.JPG]

_The rotary table exploded_

=== Basic mechanics ===
The rotary table we are using is a basic 8" horizontal/vertical table with a direct-drive stepper motor adapter and coupling of Chinese manufacture.  We took it apart to asses our backlash tuning options and just to see how it worked.  The table turns on ground beds that have elliptical channels for distributing the grease.

[http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/table_underside.JPG http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/thumbnails/table_underside.JPG]

_The underside of the rotary table showing the gear teeth_

[http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/table_bottom.JPG http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/thumbnails/table_bottom.JPG]

_The base of the rotary table_

The turntable itself is held in place by a large threaded ring on the back of the turntable.  This ring is half split, presumably to provide some spring loading to hold the table in place.

TODO: picture of this nut

The table is turned by a worm drive that meshes with screw teeth around the inside perimeter of the turntable.

[http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/screw_shaft.JPG http://sector67-sandbox.googlecode.com/svn/trunk/ProjectSheetCake/docs/images/fourth-stepper-axis/thumbnails/screw_shaft.JPG]

_The screw shaft assembly_

=== Backlash tuning ===
The worm drive has no support on the internal end and runs in a bushing whose center is eccentric to allow backlash tuning.  This bushing is held in place with a screw labeled for backlash adjustment:

TODO: picture of the backlash adjustment screw


TODO: picture of the off-center adjustment backlash adjustment nut.


This nut serves no useful adjustment purpose with this device coupled to a motor, so the thumb screw should be replaced with a set screw so that the adjustment is not messed up by accident.

If this rotary table had a simple hand wheel for turning the table, this mechanism would probably be workable, but since they adapted the direct drive shaft to it, the motor coupling needs to be attached in a fixed location.  This means you can tune the backlash once via the eccentric bushing.  This was done at the factory, and then holes were drilled and tapped for the motor adapter.

Well, actually it was done three times (at the factory?) as you can see that the holes were aligned three times and twice bolts were screwed in and ground off.  We'll have to try and determine if the current settings minimize the backlash and perhaps adjust them if they are wildly off.

TODO: picture of the ground off bolts.

You can only put so much lipstick on a pig, but we've ordered two sets of pin thrust bearings, one to replace the existing mostly frozen bicycle-style ball thrust bearings.

The second set will go on the outside of the shaft where previously a shaft collar (with a set screw that tightens directly onto the adjustment threads) just rode directly on the end of the bushing.  This should make it a bit easier to spin, increase the lifetime of the table somewhat and potentially reduce backlash to some small degree.

Once re-assembled, we can then see how little backlash we've got.  It will probably still be significant, and if so we can compensate in software.

== Motor/table integration ==
Since the system already came as an integrated unit, this was very straightforward.  The stepper shaft is attached to a coupler that drives the worm screw directly.  

The stepper motor we're using should have plenty of torque to run the table, even with the relatively lower-power stepper amp we're using.  High end speed might not be that good, but generally that is not too much of a concern for a CNC rotary table.

The coupling casting could use some refinement as well, with the crinkle coat on the end facing the table needing to be machined off and some of the access holes for set screws could be enlarged a bit for easier access.

== Electronic integration ==
Our stepper driver 

The 5i23 card has jumpers settable for 3.3 or 5 volt pullup, and I configured the card for 5 volt pullup for this driver.

== EMC2 configuration ==
To configure EMC2, we needed to add some stepgens to the configuration.  This can be done in pncconf.  However, since typically we'll be running in three-axis mode (XYZ), we'll make a separate configuration for a 4-axis rotary table configuration (XYZA).

Using the new configuration, we can integrate the stepper A axis by choosing the stepgen (on the second connector, somewhat confusing labeled "TODO get what the name of the somewhat "3" label is") as the A axis.  The pins corresponding to the pwmgens, encoders and stepgens are automatically allocated by the hostmot2 driver, and that is why we configured arbitrary I/O on the third connector, so the first two would be free for this "automatic" allocation.

To see what 5i23 pins this actually resolves to, you can look at the output of the dmesg command.

TODO: capture example dmesg output here

The pncconf tab for assigning A axis to the stepgen is shown below:

TODO: screen shot of the pncconf allocation tab

And the actual axis configuration is shown below:

TODO: screen shot of the A axis configuration page

The values were arrived at the following:

1) The step and direction delays are conservative based on the vague datasheet "5 ns" value for delays.

2) The scaling was calculated by manual measurement of the rotary table and degrees per step.  The values were confirmed when then table was completely assembled: TODO: do this

In my initial integration, I failed to set a scaling number before testing and so the motor was not moving during simple open loop testing.  Once I set a scaling number the motor was able to be moved.