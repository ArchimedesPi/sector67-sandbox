#summary A 3-axis CNC mill conversion from Anilam 3300 controls to EMC2

=3300 mill conversion=

<wiki:toc max_depth="3" />

=Introduction=

After the successful [ProjectSheetCake conversion] of our 1100 mill to EMC2 at [http://sector67.org Sector67] (and integration of a [FourthStepperAxis fourth-axis rotary table]), we are now tackling a conversion of our exsiting Anilam 3300 mill to EMC2 as well.  This page documents that effort.

=Sponsorship=
This conversion project has been sponsored by [http://compcc.com Comprehensive Computer Consulting].

In addition, this project would not be possible without significant volunteer effort from members of Sector67 and attendees of the EMC2 integrator's class, which used this project for various laboratory exercises.
= Conversion details =
== Understanding the Anilam servo amplifiers ==

The servo amplifiers in both of our mills are Anilam brand servo (one is Accu-rite brand) amplfiers with part number SMA7215-200-1 .  These are manufactured by by Glentek, and the manual is availble from http://todo:get after a free resgistration on their site.  The manual contains a nice introduction to DC brushed servo control and describes the amplifiers in detail.

We are running these servo amps in a velocity mode control loop, with tachometer feedback coming from each motor.

=== Motor control DC voltage power supply and relay ===
The manual proscribes a solid state relay for the DC power supply, and we have moved to a mechanical relay instead.  The previous control boad did have a solid state relay.  I don't expect this will have a significant impact on the operations of the amps, and the reason for the recommendation is not given.  Consulting with some motor control folks has left me relatively confident that we won't weld the contacts of our relays, which would otherwise be one reason to use a solid state relay.

=== Amplifier inhibit ===
The wires labled "inhibit" on the Anilam control board are wired to the "clamp" input of the amplifier.  The clamp signal is appropriate for estop, as it brakes the motors for a short time before disbling the amplifier.  This should make things stop on a dime on when estopped, and indeed we did notice some drift in the motors on an estop with the "fault" wires just floating.  Depending on how various DIP switches are set, the polarity of this signal can be configured.  TODO: describe how we configured the correct polarity and wired it to the enable signal of the daughter board.

From the Mesa servo control daughter board data sheet, the servo enable signal is described as TODO: get this...

=== Amplifier logic voltage ===
The amplifiers were configured for 15V logic control.  Since the enable signal of our servo control daughter board is TTL level voltage, we needed to reconfigure the logic control to be +5 volts.  TODO: describe how this is done... This, along with the clamp changes from the section above technically change the model number of this servo amplifier to TODO: figure out the new part number based on the manual.

=== Tuning the amplifiers ===
The manual gives a specific procedure for tuning the amplifiers out of the box.  In general we can probably assume that the amps are relatively well tuned with respect to the servo drives, but we can record the existing settings and put a scope on the motor output to see if the signals are appropriately tuned.  TODO: do this and record the output.  Additionally, we have noticed a small amount of drift in the amps that can be easily tuned out by adjusting the BAL (balance) pot.

TODO: record the resistance levels on the pots per the manual for each amp.

==== X axis ====

|| *Pot*                                                  || *Resistance* ||
|| Signal Gain pot wiper (RV7) at J2-5 to common (ohms)   || ||
|| Signal Gain pot wiper (RV9) at J2-6 to common (ohms)   || ||
|| Signal Gain pot wiper (RV10) at J2-7 to common (ohms)  || ||
|| Signal Gain pot wiper (RV13) at TP1-K to common (ohms) || ||

|| *Dip-switch* || 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10 ||
|| S1           ||   ||   ||   ||   ||   ||   ||   ||   ||   ||    ||

|| Date data taken:   ||       ||
|| Serial number S/N: ||       ||
|| Model number:      ||SMA7215||


=TODOs=
This project is still just beginning.  We have acquired much of the necessary hardware.  Remaining tasks include:

  * Video of this mill functioning so that when we extract the Anilam controls they can be sold (done 1/25/2012), thanks Chris!).
  * Design and testing of the 24V estop circuit (started but needs more work and verification)
  * Design and implementation of the limit switch/estop interface daughter board
  * Design and implementation of the 24V fan interface daughter board
  * Get an aluminium plate to mount all of the daughter boards, including the Mesa and other boards, and drill appropriate mounting holes for the standoffs (done 1/25/2012).
  * Cut and wire the encoders to the Mesa servo daughter board
  * Cut and wire the servo amps to the Mesa servo daughter board
  * Wire the limits and fans and servo enable 
  * Determine a location for the PC and put it there.

Once these tasks are complete and the mill is basically functional, we can leverage much of the work on the increasingly misnamed 1100 mill for the EMC2 configuration.

= Build Log =
== 2/9/2012 ==

We made great progress last night during the first half of the mill conversion hackathon.  Scott S dis a great job cleaning out the workspace around the mill control box, and then got straight to work identifying and converting the quadrature TTL-level encoder signals coming from the motors and the +5/GND supply needed to drive the encoders.  Once the X axis was wired to the Mesa servo daughter card we were able build a sample starting configuration using pncconf and see correct movement in the open loop configuration for the axis.

Scott H pulled down LinuxCNC 2.4.7 from the repository to avoid some pncconf bugs.

Brett U and Larry W provided technical assistance confirming proper operation of the encoder signals.  In the mean time Scott H worked on the design and soldering of the I/O integration board, which is the circuit board to integrate LinuxCNC and the relays with the limit and estop switches.

After the encoders for all three axes were wired and confirmed functional, we took a breather to re-group, and then tackled getting the motors to move under LinuxCNC control.  We re-used the existing Anilam servo enable functions to enable power to the drive (rather than hard-coding power, which would take away estop and limit safety).

We tested each axis individually under open loop control to determine which of them needed to be inverted.  After confirming open loop control, we then enabled basic PID control and started a full-blown LinuxCNC instance.  By the end of the session, we had three-axis coordinated motion working.  Some minor problems:

  * Following error needed to be tweaked higher by default.  We need to go back and revisit the PID tuning to resolve this.

  * I had "worked ahead" and defined I/O pins for limits and estop, but since we did not have that board, the maching would not enable (it thought it was on a limit switch), so they had to be removed.

Work we will hopefully accomplish on Sunday 2/12/2012 (noon-5):

  * Fix the shielding on the incoming encoder cables.  This should go to case ground, not ground on the servo card.  We'll want to put a P clamp over the bundle of incoming shielded cables and run that to the star ground.
  * Test the new I/O integration board out of the mill.
  * Implement the I/O integration board in the mill.
  * Remove the existing I/O integration board and extraneous power supplies.
  * Drill mounting holes in the new I/O integration board to match the existing mounting screws
  * Figure out of the servo inhibit wires are going to cause us a problem.  This would be easiest if we can find a data sheet for the servo amps.
  * Wire and confirm the fans are working (check to see if one fan comes on with servo enable and one runs all the time)
  * Install the new monitor, keyboard and mouse on the PC arm
  * Secure the monitor, keyboard and mouse wiring to the arm
  * Wire the ethernet cord to the ceiling
  * Remove the existing large cable PC plug
  * Make longer 50 pin twisted cables and route them through the former large cable plug hole.
  * Create and integrate the servo reset pulse circuit (can copy from the 1100 mill)
  * Make some chips using LinuxCNC!

==2/12/2012==
Another 5 solid hours of build work on the 3300 mill.  Larry W and Scott H got the I/O integration board debugged, tested externally, integrated into LinuxCNC and finally integrated into the overall mill.  With a few minor debugging tangents, it worked exactly as planned.  The integration board, when soldered properly (ha!) works as expected, and, copying the classic ladder 2 second servo reset pulse generator from the 1100 mill we were able to get machine enable working from LinuxCNC.

This is all great news, and after getting the mill working we were able to remove the existing Anilam integration board and 5 and 15V power supplies.  We ran out of time and ended up leaving the machine mid-operation, with some components and wiring still yet to remove and some yet to clean up properly.  The TODOs are:

  * Determine where the PC will ultimately live
  * Make longer 50-pin ribbon cables
  * Remove the large cable plug and all wires hooked to it
  * Wire the internal 24V power supply to the integration board instead of our bench supply.
  * Wire the 120V fans to power (crimp terminals to them)
  * Wire the 24V power supply to power (same crimp terminals)
  * Fix the shield grounding to the case not the servo board.
  * Integrate a 3-phase contactor to enable estop
  * Integrate the oiler power per Chris' request
  * Integrate the inhibit wires into the clamp function (may require reconfiguring the servo amps for 5V logic, confirming the polarity of the signal is correct and wiring each amp to the enable pin on the servo daughter card.
  

It turns out that if the servo inhibit wires are left to float that they do not inhibit the drivers, although we were not able to find any data sheets for the Anilam servo amplifiers.  

We also switched the integration circuit to use the normally open contact on the estop buttons for communicating estop to LinuxCNC.  Although this is workable, it is not ideal, as when the machine is off it shows up as not estopped (but on the limit switches).  This can be a bit confusing and counter-intuitive, and better would be for it to show up as estopped.

For safety purposes we wired a temporary box to hold the estop button using a 120V wall enclosure.  Hopefully this will remain temporary.